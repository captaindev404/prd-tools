// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

// ========== ENUMS ==========

enum Role {
  USER
  PM
  PO
  RESEARCHER
  ADMIN
  MODERATOR
}

enum ProductArea {
  Reservations
  CheckIn
  Payments
  Housekeeping
  Backoffice
}

enum FeatureStatus {
  idea
  discovery
  shaping
  in_progress
  released
  generally_available
  deprecated
}

enum FeedbackState {
  new
  triaged
  merged
  in_roadmap
  closed
}

enum ModerationStatus {
  auto_pending
  pending_review
  approved
  rejected
  needs_info
}

enum Source {
  app
  web
  kiosk
  support
  import
}

enum Visibility {
  public
  internal
}

enum RoadmapStage {
  now
  next
  later
  under_consideration
}

enum SessionType {
  usability
  interview
  prototype_walkthrough
  remote_test
}

// ========== MODELS ==========

model Village {
  id        String   @id // vlg-001
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  users User[]
}

model User {
  id         String   @id // usr_${ulid}
  employeeId String   @unique
  email      String   @unique
  displayName String?
  role       Role     @default(USER)

  // Profile fields
  bio        String?
  avatarUrl  String?
  preferredLanguage String @default("en") // "en" | "fr"

  // Village context
  currentVillageId String?
  currentVillage   Village? @relation(fields: [currentVillageId], references: [id])

  // JSON fields per DSL spec
  villageHistory String @default("[]") // JSON array: [{village_id, from, to}]
  consents       String @default("[]") // JSON array: ["research_contact", "usage_analytics", "email_updates"]
  consentHistory String @default("[]") // JSON array: [{consent_type, granted, timestamp}]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  feedbacks           Feedback[]
  votes               Vote[]
  roadmapItems        RoadmapItem[]
  panelMemberships    PanelMembership[]
  questionnaires      Questionnaire[]
  questionnaireResponses QuestionnaireResponse[]
  facilitatedSessions Session[] @relation("SessionFacilitators")
  events              Event[]
  notifications       Notification[]

  // NextAuth adapter relations
  accounts            Account[]
  sessions            AuthSession[]

  @@index([employeeId])
  @@index([email])
}

// ========== NEXTAUTH MODELS ==========

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model AuthSession {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Feature {
  id          String        @id // feat-checkin-mobile
  title       String
  area        ProductArea
  status      FeatureStatus @default(idea)
  tags        String        @default("[]") // JSON array of strings
  description String?
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  // Relations
  feedbacks     Feedback[]
  roadmapItems  RoadmapItem[]
}

model Feedback {
  id               String           @id // fb_${ulid}
  authorId         String
  author           User             @relation(fields: [authorId], references: [id])

  title            String // max 120 chars (validated at app level)
  body             String // max 5000 chars (validated at app level)

  // Context
  villageId        String? // optional per DSL
  visibility       Visibility       @default(public)
  source           Source           @default(app)

  // Feature relations
  featureId        String?
  feature          Feature?         @relation(fields: [featureId], references: [id])

  // State management
  state            FeedbackState    @default(new)
  moderationStatus ModerationStatus @default(auto_pending)
  moderationSignals String          @default("[]") // JSON array: ["toxicity", "spam", "pii", "off_topic"]

  // Moderation scoring and flags
  toxicityScore    Float            @default(0.0) // 0.0 to 1.0
  spamScore        Float            @default(0.0) // 0.0 to 1.0
  offTopicScore    Float            @default(0.0) // 0.0 to 1.0
  hasPii           Boolean          @default(false)
  needsReview      Boolean          @default(false)
  moderatedBy      String?
  moderatedAt      DateTime?

  // Deduplication
  duplicateOfId    String?
  duplicateOf      Feedback?        @relation("FeedbackDuplicates", fields: [duplicateOfId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  duplicates       Feedback[]       @relation("FeedbackDuplicates")

  // Metadata
  attachments      String           @default("[]") // JSON array of attachment URLs
  i18nData         String           @default("{}") // JSON object for translations

  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt
  editWindowEndsAt DateTime? // created_at + 15 minutes

  // Relations
  votes            Vote[]
  roadmapItems     RoadmapItem[]

  @@index([authorId])
  @@index([state])
  @@index([createdAt])
  @@index([featureId])
}

model Vote {
  id         String   @id @default(cuid())
  feedbackId String
  feedback   Feedback @relation(fields: [feedbackId], references: [id], onDelete: Cascade)

  userId     String
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  weight     Float    @default(1.0) // Weighted voting per DSL spec
  decayedWeight Float @default(1.0) // For 180-day half-life decay

  createdAt  DateTime @default(now())

  @@unique([feedbackId, userId]) // One vote per user per feedback
  @@index([feedbackId])
  @@index([userId])
}

model RoadmapItem {
  id          String        @id // rmp_${ulid}
  title       String
  stage       RoadmapStage
  description String?

  // Ownership
  createdById String
  createdBy   User @relation(fields: [createdById], references: [id])

  // Progress and timing
  targetDate  DateTime?
  progress    Int @default(0) // 0-100
  visibility  Visibility @default(public)

  // Links
  featureIds       String @default("[]") // JSON array of feature IDs
  features         Feature[]
  feedbackIds      String @default("[]") // JSON array of canonical feedback IDs
  feedbacks        Feedback[]
  jiraTickets      String @default("[]") // JSON array: ["ODYS-123", "PMS-456"]
  figmaLinks       String @default("[]") // JSON array of Figma URLs

  // Communications
  commsCadence     String? // "monthly" | "ad_hoc"
  commsChannels    String  @default("[]") // JSON array: ["in-app", "email", "inbox"]
  commsAudience    String  @default("{}") // JSON object with filters

  // Metrics
  successCriteria  String  @default("[]") // JSON array of criteria strings
  guardrails       String  @default("[]") // JSON array of guardrail strings

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([stage])
  @@index([createdById])
}

model Panel {
  id                String   @id // pan_${ulid}
  name              String

  // Eligibility rules (stored as JSON per DSL spec)
  eligibilityRules  String   @default("{}") // JSON object with include_roles, include_villages, attributes_predicates, required_consents
  sizeTarget        Int?
  quotas            String   @default("[]") // JSON array of quota objects

  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  // Relations
  memberships       PanelMembership[]
  questionnaires    Questionnaire[]
  sessions          Session[]
}

model PanelMembership {
  id        String   @id @default(cuid())
  panelId   String
  panel     Panel    @relation(fields: [panelId], references: [id], onDelete: Cascade)

  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  joinedAt  DateTime @default(now())
  active    Boolean  @default(true)

  @@unique([panelId, userId])
  @@index([panelId])
  @@index([userId])
}

model Questionnaire {
  id          String   @id // qnn_${ulid}
  title       String
  version     String   @default("1.0.0") // semver
  status      String   @default("draft") // draft | published | closed

  // Questions (stored as JSON array per DSL spec)
  questions   String   @default("[]") // JSON array of question objects

  // Targeting
  panelIds    String   @default("[]") // JSON array of panel IDs
  panels      Panel[]
  adHocFilters String  @default("{}") // JSON object with villages, features_interacted

  // Delivery
  deliveryMode   String    @default("[]") // JSON array: ["in-app", "email"]
  startAt        DateTime?
  endAt          DateTime?
  maxResponses   Int?

  // Response settings
  anonymous      Boolean   @default(false)
  responseLimit  Int       @default(1) // 1 response per user, or 0 for unlimited

  // Analytics
  aggregateExports String  @default("[]") // JSON array: ["csv", "parquet"]
  piiIncluded      Boolean @default(false)

  // Ownership
  createdById String
  createdBy   User   @relation(fields: [createdById], references: [id])

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  responses   QuestionnaireResponse[]

  @@index([status])
  @@index([createdById])
}

model QuestionnaireResponse {
  id               String        @id @default(cuid())
  questionnaireId  String
  questionnaire    Questionnaire @relation(fields: [questionnaireId], references: [id], onDelete: Cascade)

  respondentId     String
  respondent       User          @relation(fields: [respondentId], references: [id], onDelete: Cascade)

  answers          String        @default("{}") // JSON object: {q1: value, q2: value}
  scoreMap         String        @default("{}") // JSON object for computed scores

  completedAt      DateTime      @default(now())

  @@index([questionnaireId])
  @@index([respondentId])
}

model Session {
  id                String      @id // ses_${ulid}
  type              SessionType

  prototypeLink     String?
  scheduledAt       DateTime
  durationMinutes   Int         @default(45)

  // Participants
  panelId           String?
  panel             Panel?      @relation(fields: [panelId], references: [id])
  participantIds    String      @default("[]") // JSON array of user IDs
  minParticipants   Int         @default(1)
  maxParticipants   Int         @default(6)

  // Facilitators
  facilitators      User[]      @relation("SessionFacilitators")
  facilitatorIds    String      @default("[]") // JSON array of user IDs for easier queries

  // Consent and recording
  consentRequired   Boolean     @default(true)
  recordingEnabled  Boolean     @default(true)
  recordingStorageDays Int      @default(365)

  // Notes
  notesSecure       Boolean     @default(true)
  notesUri          String?

  status            String      @default("scheduled") // scheduled | in_progress | completed | cancelled

  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt

  @@index([scheduledAt])
  @@index([type])
}

model Event {
  id        String   @id @default(cuid())
  type      String   // "feedback.created", "vote.cast", etc.
  payload   String   @default("{}") // JSON object with event-specific data

  userId    String?
  user      User?    @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now())

  @@index([type])
  @@index([createdAt])
}

model Notification {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  type      String   // 'panel_invite', 'questionnaire', 'roadmap_update', 'feedback_reply', etc.
  title     String
  body      String
  link      String?  // Optional link to relevant page
  readAt    DateTime?
  createdAt DateTime @default(now())

  @@index([userId])
  @@index([createdAt])
  @@index([userId, readAt])
  @@index([userId, createdAt])
}
