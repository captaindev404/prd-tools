// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

// ========== ENUMS ==========

enum Role {
  USER
  PM
  PO
  RESEARCHER
  ADMIN
  MODERATOR
}

enum ProductArea {
  Reservations
  CheckIn
  Payments
  Housekeeping
  Backoffice
}

enum FeatureStatus {
  idea
  discovery
  shaping
  in_progress
  released
  generally_available
  deprecated
}

enum FeedbackState {
  new
  triaged
  merged
  in_roadmap
  closed
}

enum ModerationStatus {
  auto_pending
  pending_review
  approved
  rejected
  needs_info
}

enum Source {
  app
  web
  kiosk
  support
  import
}

enum Visibility {
  public
  internal
}

enum RoadmapStage {
  now
  next
  later
  under_consideration
}

enum SessionType {
  usability
  interview
  prototype_walkthrough
  remote_test
}

enum RecordingStatus {
  initializing
  recording
  paused
  processing
  completed
  failed
  deleted
}

enum RecordingType {
  camera
  screen
  both
}

// ========== MODELS ==========

model Village {
  id        String   @id // vlg-001
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  users     User[]
  feedbacks Feedback[]
}

model User {
  id         String   @id // usr_${ulid}
  employeeId String   @unique
  email      String   @unique
  displayName String?
  role       Role     @default(USER)

  // Profile fields
  bio        String?
  avatarUrl  String?
  preferredLanguage String @default("en") // "en" | "fr"

  // Village context
  currentVillageId String?
  currentVillage   Village? @relation(fields: [currentVillageId], references: [id])

  // JSON fields per DSL spec
  villageHistory String @default("[]") // JSON array: [{village_id, from, to}]
  consents       String @default("[]") // JSON array: ["research_contact", "usage_analytics", "email_updates"]
  consentHistory String @default("[]") // JSON array: [{consent_type, granted, timestamp}]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  feedbacks           Feedback[]
  votes               Vote[]
  roadmapItems        RoadmapItem[]
  panelMemberships    PanelMembership[]
  questionnaires      Questionnaire[]
  questionnaireResponses QuestionnaireResponse[]
  facilitatedSessions Session[] @relation("SessionFacilitators")
  createdPanels       Panel[] @relation("UserCreatedPanels")
  events              Event[]
  notifications       Notification[]
  notificationPreferences NotificationPreferences?

  // Gamification relations
  userPoints          UserPoints?
  userBadges          UserBadge[]
  userAchievements    UserAchievement[]
  pointTransactions   PointTransaction[]

  // NextAuth adapter relations
  accounts            Account[]
  sessions            AuthSession[]

  @@index([employeeId])
  @@index([email])
}

// ========== NEXTAUTH MODELS ==========

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model AuthSession {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Feature {
  id          String        @id // feat-checkin-mobile
  title       String
  area        ProductArea
  status      FeatureStatus @default(idea)
  tags        String        @default("[]") // JSON array of strings
  description String?
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  // Relations
  feedbacks     Feedback[]
  roadmapItems  RoadmapItem[]
}

model Feedback {
  id               String           @id // fb_${ulid}
  authorId         String
  author           User             @relation(fields: [authorId], references: [id])

  title            String // max 120 chars (validated at app level)
  body             String // max 5000 chars (validated at app level)

  // Context
  villageId        String? // optional per DSL
  village          Village?         @relation(fields: [villageId], references: [id])
  visibility       Visibility       @default(public)
  source           Source           @default(app)
  productArea      ProductArea?

  // Feature relations
  featureId        String?
  feature          Feature?         @relation(fields: [featureId], references: [id])

  // State management
  state            FeedbackState    @default(new)
  moderationStatus ModerationStatus @default(auto_pending)
  moderationSignals String          @default("[]") // JSON array: ["toxicity", "spam", "pii", "off_topic"]

  // Moderation scoring and flags
  toxicityScore    Float            @default(0.0) // 0.0 to 1.0
  spamScore        Float            @default(0.0) // 0.0 to 1.0
  offTopicScore    Float            @default(0.0) // 0.0 to 1.0
  hasPii           Boolean          @default(false)
  needsReview      Boolean          @default(false)
  moderatedBy      String?
  moderatedAt      DateTime?

  // Deduplication
  duplicateOfId    String?
  duplicateOf      Feedback?        @relation("FeedbackDuplicates", fields: [duplicateOfId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  duplicates       Feedback[]       @relation("FeedbackDuplicates")

  // Metadata
  attachments      String           @default("[]") // JSON array of attachment URLs
  i18nData         String           @default("{}") // JSON object for translations

  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt
  editWindowEndsAt DateTime? // created_at + 15 minutes

  // Relations
  votes            Vote[]
  roadmapItems     RoadmapItem[]

  @@index([authorId])
  @@index([state])
  @@index([createdAt])
  @@index([featureId])
  @@index([moderationStatus])
  @@index([productArea])
  @@index([state, moderationStatus]) // Composite index for trending queries
  @@index([createdAt, state]) // For recent feedback filtering
}

model Vote {
  id         String   @id @default(cuid())
  feedbackId String
  feedback   Feedback @relation(fields: [feedbackId], references: [id], onDelete: Cascade)

  userId     String
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  weight     Float    @default(1.0) // Weighted voting per DSL spec
  decayedWeight Float @default(1.0) // For 180-day half-life decay

  createdAt  DateTime @default(now())

  @@unique([feedbackId, userId]) // One vote per user per feedback
  @@index([feedbackId])
  @@index([userId])
  @@index([feedbackId, decayedWeight]) // For vote aggregation queries
  @@index([createdAt]) // For recent votes
}

model RoadmapItem {
  id          String        @id // rmp_${ulid}
  title       String
  stage       RoadmapStage
  description String?

  // Ownership
  createdById String
  createdBy   User @relation(fields: [createdById], references: [id])

  // Progress and timing
  targetDate  DateTime?
  progress    Int @default(0) // 0-100
  visibility  Visibility @default(public)

  // Links
  featureIds       String @default("[]") // JSON array of feature IDs
  features         Feature[]
  feedbackIds      String @default("[]") // JSON array of canonical feedback IDs
  feedbacks        Feedback[]
  jiraTickets      String @default("[]") // JSON array: ["ODYS-123", "PMS-456"]
  figmaLinks       String @default("[]") // JSON array of Figma URLs

  // Communications
  commsCadence     String? // "monthly" | "ad_hoc"
  commsChannels    String  @default("[]") // JSON array: ["in-app", "email", "inbox"]
  commsAudience    String  @default("{}") // JSON object with filters

  // Metrics
  successCriteria  String  @default("[]") // JSON array of criteria strings
  guardrails       String  @default("[]") // JSON array of guardrail strings

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([stage])
  @@index([createdById])
  @@index([visibility, updatedAt]) // For public roadmap queries
  @@index([stage, visibility]) // For stage filtering
}

model Panel {
  id                String   @id // pan_${ulid}
  name              String
  description       String?

  // Eligibility rules (stored as JSON per DSL spec)
  eligibilityRules  String   @default("{}") // JSON object with include_roles, include_villages, attributes_predicates, required_consents
  sizeTarget        Int?
  quotas            String   @default("[]") // JSON array of quota objects

  // Ownership
  createdById       String
  createdBy         User     @relation("UserCreatedPanels", fields: [createdById], references: [id])

  // Status
  archived          Boolean  @default(false)

  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  // Relations
  memberships       PanelMembership[]
  questionnaires    Questionnaire[]
  sessions          Session[]

  @@index([createdById])
  @@index([archived])
}

model PanelMembership {
  id        String   @id @default(cuid())
  panelId   String
  panel     Panel    @relation(fields: [panelId], references: [id], onDelete: Cascade)

  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  joinedAt  DateTime @default(now())
  active    Boolean  @default(true)

  @@unique([panelId, userId])
  @@index([panelId])
  @@index([userId])
  @@index([userId, active]) // For active panel lookups
}

model Questionnaire {
  id          String   @id // qnn_${ulid}
  title       String
  version     String   @default("1.0.0") // semver
  status      String   @default("draft") // draft | published | closed

  // Questions (stored as JSON array per DSL spec)
  questions   String   @default("[]") // JSON array of question objects

  // Targeting
  panelIds    String   @default("[]") // JSON array of panel IDs
  panels      Panel[]
  adHocFilters String  @default("{}") // JSON object with villages, features_interacted

  // Delivery
  deliveryMode   String    @default("[]") // JSON array: ["in-app", "email"]
  startAt        DateTime?
  endAt          DateTime?
  maxResponses   Int?

  // Response settings
  anonymous      Boolean   @default(false)
  responseLimit  Int       @default(1) // 1 response per user, or 0 for unlimited

  // Analytics
  aggregateExports String  @default("[]") // JSON array: ["csv", "parquet"]
  piiIncluded      Boolean @default(false)

  // Ownership
  createdById String
  createdBy   User   @relation(fields: [createdById], references: [id])

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  responses   QuestionnaireResponse[]

  @@index([status])
  @@index([createdById])
}

model QuestionnaireResponse {
  id               String        @id @default(cuid())
  questionnaireId  String
  questionnaire    Questionnaire @relation(fields: [questionnaireId], references: [id], onDelete: Cascade)

  respondentId     String
  respondent       User          @relation(fields: [respondentId], references: [id], onDelete: Cascade)

  answers          String        @default("{}") // JSON object: {q1: value, q2: value}
  scoreMap         String        @default("{}") // JSON object for computed scores

  completedAt      DateTime      @default(now())

  @@index([questionnaireId])
  @@index([respondentId])
}

model Session {
  id                String      @id // ses_${ulid}
  type              SessionType

  prototypeLink     String?
  scheduledAt       DateTime
  durationMinutes   Int         @default(45)

  // Participants
  panelId           String?
  panel             Panel?      @relation(fields: [panelId], references: [id])
  participantIds    String      @default("[]") // JSON array of user IDs
  minParticipants   Int         @default(1)
  maxParticipants   Int         @default(6)

  // Facilitators
  facilitators      User[]      @relation("SessionFacilitators")
  facilitatorIds    String      @default("[]") // JSON array of user IDs for easier queries

  // Consent and recording
  consentRequired   Boolean     @default(true)
  recordingEnabled  Boolean     @default(true)
  recordingStorageDays Int      @default(365)

  // Notes
  notesSecure       Boolean     @default(true)
  notesUri          String?

  status            String      @default("scheduled") // scheduled | in_progress | completed | cancelled

  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt

  // Relations
  recordings        SessionRecording[]

  @@index([scheduledAt])
  @@index([type])
}

model SessionRecording {
  id                String          @id @default(cuid()) // rec_${ulid}
  sessionId         String
  session           Session         @relation(fields: [sessionId], references: [id], onDelete: Cascade)

  // Recording metadata
  type              RecordingType   @default(both)
  status            RecordingStatus @default(initializing)

  // Storage info
  storageUrl        String?         // S3-compatible storage URL
  storageBucket     String?         // Bucket name
  storageKey        String?         // Object key in bucket
  signedUrl         String?         // Temporary signed URL for playback
  signedUrlExpiry   DateTime?       // When signed URL expires

  // File metadata
  filename          String?
  mimeType          String?         // video/webm, video/mp4, etc.
  fileSize          Int?            // Bytes
  durationSeconds   Int?            // Recording duration

  // Dimensions (for screen recordings)
  width             Int?
  height            Int?

  // Processing
  processingStartedAt DateTime?
  processingCompletedAt DateTime?
  processingError   String?

  // Chunks info (for chunked uploads)
  totalChunks       Int             @default(0)
  uploadedChunks    Int             @default(0)
  chunkUrls         String          @default("[]") // JSON array of chunk URLs

  // Transcription
  transcriptionUrl  String?         // URL to transcript file
  transcriptionText String?         // Stored transcript text
  transcriptionStatus String        @default("pending") // pending | processing | completed | failed

  // Annotations and highlights
  annotations       String          @default("[]") // JSON array: [{timestamp, text, author, type}]
  highlights        String          @default("[]") // JSON array: [{start, end, label, color}]

  // Metadata
  recordedBy        String          // User ID who initiated recording
  recordingStartedAt DateTime?
  recordingEndedAt  DateTime?

  // GDPR & retention
  expiresAt         DateTime?       // Auto-delete after retention period
  deletedAt         DateTime?       // Soft delete timestamp
  deletedBy         String?         // User ID who deleted

  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt

  @@index([sessionId])
  @@index([status])
  @@index([recordedBy])
  @@index([expiresAt])
  @@index([createdAt])
}

model Event {
  id        String   @id @default(cuid())
  type      String   // "feedback.created", "vote.cast", etc.
  payload   String   @default("{}") // JSON object with event-specific data

  userId    String?
  user      User?    @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now())

  @@index([type])
  @@index([createdAt])
}

model Notification {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  type      String   // 'panel_invite', 'questionnaire', 'roadmap_update', 'feedback_reply', etc.
  title     String
  body      String
  link      String?  // Optional link to relevant page
  readAt    DateTime?
  createdAt DateTime @default(now())

  @@index([userId])
  @@index([createdAt])
  @@index([userId, readAt]) // For unread notifications
  @@index([userId, createdAt]) // For recent notifications
}

model AuditLog {
  id         String   @id @default(cuid())
  userId     String   // User who performed the action
  action     String   // e.g., "feedback.create", "vote.cast", "moderation.approve", "user.delete"
  resourceId String?  // ID of the affected resource
  resourceType String? // Type of resource (e.g., "feedback", "vote", "user")
  metadata   String   @default("{}") // JSON object with additional context
  ipAddress  String?
  userAgent  String?
  createdAt  DateTime @default(now())

  @@index([userId])
  @@index([action])
  @@index([createdAt])
  @@index([resourceId])
}

model EmailLog {
  id          String   @id @default(cuid())
  userId      String?  // Recipient user ID (null for non-user emails)
  to          String   // Recipient email address
  subject     String
  templateType String  // Template identifier (e.g., "welcome", "feedback_update", "roadmap_update")
  status      String   @default("pending") // pending | sent | failed | bounced
  messageId   String?  // SendGrid message ID for tracking
  error       String?  // Error message if sending failed
  metadata    String   @default("{}") // JSON object with template params and context
  sentAt      DateTime?
  createdAt   DateTime @default(now())

  @@index([userId])
  @@index([status])
  @@index([createdAt])
  @@index([templateType])
  @@index([to])
}

model NotificationPreferences {
  id                String   @id @default(cuid())
  userId            String   @unique
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  // Email notification preferences
  feedbackUpdates   String   @default("real_time") // real_time | daily | weekly | never
  roadmapUpdates    String   @default("real_time") // real_time | daily | weekly | never
  researchInvites   String   @default("real_time") // real_time | daily | weekly | never
  weeklyDigest      Boolean  @default(true)

  // Unsubscribe token for email preferences
  unsubscribeToken  String   @unique

  updatedAt         DateTime @updatedAt
  createdAt         DateTime @default(now())

  @@index([userId])
  @@index([unsubscribeToken])
}

model HRISSync {
  id              String   @id @default(cuid())
  status          String   // "pending" | "in_progress" | "completed" | "failed"
  syncType        String   // "full" | "incremental" | "manual"

  // Statistics
  recordsProcessed Int     @default(0)
  recordsCreated   Int     @default(0)
  recordsUpdated   Int     @default(0)
  recordsFailed    Int     @default(0)
  conflictsDetected Int    @default(0)

  // Timing
  startedAt       DateTime?
  completedAt     DateTime?

  // Error tracking
  errorMessage    String?
  errorDetails    String?  // JSON object with detailed errors

  // Metadata
  triggeredBy     String?  // User ID who triggered manual sync
  metadata        String   @default("{}") // JSON object with sync configuration

  createdAt       DateTime @default(now())

  @@index([status])
  @@index([createdAt])
  @@index([syncType])
}

model HRISConflict {
  id              String   @id @default(cuid())
  syncId          String   // Reference to HRISSync
  conflictType    String   // "duplicate_email" | "duplicate_employee_id" | "email_change" | "data_mismatch" | "village_not_found"

  // HRIS data
  hrisEmployeeId  String
  hrisEmail       String?
  hrisData        String   @default("{}") // JSON object with full HRIS record

  // System data
  existingUserId  String?  // User ID if conflict with existing user
  systemData      String?  @default("{}") // JSON object with existing system data

  // Resolution
  status          String   @default("pending") // "pending" | "auto_resolved" | "manually_resolved" | "ignored"
  resolution      String?  // "keep_system" | "use_hris" | "merge" | "create_new"
  resolvedBy      String?  // User ID who resolved conflict
  resolvedAt      DateTime?
  resolutionNotes String?

  createdAt       DateTime @default(now())

  @@index([status])
  @@index([syncId])
  @@index([hrisEmployeeId])
  @@index([conflictType])
  @@index([createdAt])
}

model CollaborationSession {
  id              String   @id @default(cuid())
  sessionName     String   // E.g., "feedback-triage-2025-10-13"
  type            String   @default("feedback") // "feedback" | "roadmap" | "moderation"

  // Participants
  participantIds  String   @default("[]") // JSON array of active user IDs

  // Session metadata
  activeCount     Int      @default(0)
  lastActivityAt  DateTime @default(now())

  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Relations
  comments        CollaborationComment[]

  @@index([sessionName])
  @@index([type])
  @@index([lastActivityAt])
}

model CollaborationComment {
  id          String               @id @default(cuid())
  sessionId   String
  session     CollaborationSession @relation(fields: [sessionId], references: [id], onDelete: Cascade)

  // Author
  authorId    String
  authorName  String  // Cached for performance
  authorAvatar String? // Cached avatar URL

  // Content
  content     String

  // Context - what feedback/item is being discussed
  feedbackId  String?
  resourceId  String? // Generic resource ID for roadmap items, etc.
  resourceType String? // "feedback" | "roadmap" | "moderation"

  // Threading
  parentId    String?
  parent      CollaborationComment? @relation("CommentReplies", fields: [parentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  replies     CollaborationComment[] @relation("CommentReplies")

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([sessionId])
  @@index([feedbackId])
  @@index([resourceId])
  @@index([authorId])
  @@index([parentId])
  @@index([createdAt])
}

// ========== GAMIFICATION MODELS ==========

model UserPoints {
  id          String   @id @default(cuid())
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  // Points by category
  feedbackPoints      Int @default(0)
  votingPoints        Int @default(0)
  researchPoints      Int @default(0)
  qualityPoints       Int @default(0)
  totalPoints         Int @default(0)

  // Tracking
  weeklyPoints        Int @default(0)
  monthlyPoints       Int @default(0)
  lastWeekReset       DateTime @default(now())
  lastMonthReset      DateTime @default(now())

  // Metadata
  level               Int @default(1)
  nextLevelThreshold  Int @default(100)

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@unique([userId])
  @@index([totalPoints])
  @@index([weeklyPoints])
  @@index([monthlyPoints])
  @@index([userId, totalPoints])
}

model Badge {
  id          String   @id @default(cuid())
  key         String   @unique // e.g., "feedback_bronze", "vote_silver"
  name        String
  description String
  tier        String   // "bronze" | "silver" | "gold" | "platinum"
  category    String   // "feedback" | "voting" | "research" | "engagement"
  iconUrl     String?
  requirement Int      // Number of actions needed
  points      Int      @default(0) // Bonus points for earning this badge

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  userBadges  UserBadge[]

  @@index([category])
  @@index([tier])
}

model UserBadge {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  badgeId   String
  badge     Badge    @relation(fields: [badgeId], references: [id], onDelete: Cascade)

  // Progress tracking
  progress  Int      @default(0)
  earnedAt  DateTime?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, badgeId])
  @@index([userId])
  @@index([badgeId])
  @@index([earnedAt])
  @@index([userId, earnedAt])
}

model Achievement {
  id          String   @id @default(cuid())
  key         String   @unique
  name        String
  description String
  category    String   // "streak" | "milestone" | "special"
  iconUrl     String?
  requirement String   @default("{}") // JSON object with requirements
  points      Int      @default(0)
  hidden      Boolean  @default(false) // Secret achievements

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  userAchievements UserAchievement[]

  @@index([category])
  @@index([hidden])
}

model UserAchievement {
  id            String      @id @default(cuid())
  userId        String
  user          User        @relation(fields: [userId], references: [id], onDelete: Cascade)

  achievementId String
  achievement   Achievement @relation(fields: [achievementId], references: [id], onDelete: Cascade)

  progress      String      @default("{}") // JSON object tracking progress
  earnedAt      DateTime?

  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt

  @@unique([userId, achievementId])
  @@index([userId])
  @@index([achievementId])
  @@index([earnedAt])
  @@index([userId, earnedAt])
}

model Leaderboard {
  id          String   @id @default(cuid())
  period      String   // "weekly" | "monthly" | "all_time"
  category    String   // "overall" | "feedback" | "voting" | "research"

  // Snapshot data
  rankings    String   @default("[]") // JSON array of {userId, displayName, points, rank}
  periodStart DateTime
  periodEnd   DateTime

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([period])
  @@index([category])
  @@index([periodStart])
  @@index([period, category, periodStart])
}

model PointTransaction {
  id          String   @id @default(cuid())
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  points      Int      // Can be positive or negative
  category    String   // "feedback" | "voting" | "research" | "quality" | "bonus"
  action      String   // "submit_feedback" | "vote" | "questionnaire" | "session" | "badge_earned"

  // Reference to the action
  resourceId  String?
  resourceType String? // "feedback" | "vote" | "questionnaire" | "session" | "badge"

  metadata    String   @default("{}") // JSON object with additional context

  createdAt   DateTime @default(now())

  @@index([userId])
  @@index([category])
  @@index([action])
  @@index([userId, createdAt])
  @@index([resourceId, resourceType])
}

// ========== AI/ML MODELS ==========

model AIUsageLog {
  id          String   @id @default(cuid())

  // Request details
  operation   String   // "categorization" | "sentiment" | "duplicate_detection" | "embedding"
  model       String   // "gpt-4o-mini" | "text-embedding-3-small"

  // User context
  userId      String?  // User who triggered the AI operation (null for system ops)
  feedbackId  String?  // Related feedback ID if applicable

  // Usage metrics
  promptTokens     Int     @default(0)
  completionTokens Int     @default(0)
  totalTokens      Int     @default(0)

  // Response metadata
  success          Boolean @default(true)
  errorMessage     String?
  latencyMs        Int?    // Request latency in milliseconds

  // AI output
  result           String  @default("{}") // JSON object with AI response
  confidence       Float?  // Confidence score if applicable (0-1)

  // Cost tracking (approximate)
  estimatedCostUsd Float?  // Estimated cost in USD

  createdAt        DateTime @default(now())

  @@index([operation])
  @@index([userId])
  @@index([feedbackId])
  @@index([createdAt])
  @@index([success])
  @@index([operation, createdAt]) // For usage analytics
}

model FeedbackAIMetadata {
  id                String   @id @default(cuid())
  feedbackId        String   @unique // One-to-one with Feedback

  // AI Categorization
  aiProductArea     String?  // AI-suggested product area
  categorizationConfidence Float? // 0-1
  categorizationReasoning  String?

  // Sentiment Analysis
  sentiment         String?  // "positive" | "neutral" | "negative"
  sentimentScore    Float?   // 0-1 (0=negative, 0.5=neutral, 1=positive)
  sentimentConfidence Float?
  urgencyScore      Float?   // Detected urgency level (0-1)

  // Semantic Embedding (for duplicate detection)
  embedding         String?  // JSON array of embedding vector (1536 dimensions)
  embeddingModel    String?  // "text-embedding-3-small"

  // Duplicate Detection
  semanticDuplicates String  @default("[]") // JSON array of {feedbackId, similarity}
  duplicateCheckAt   DateTime?

  // Manual Overrides
  manuallyOverridden Boolean @default(false)
  overriddenBy       String? // User ID who overrode AI suggestions
  overriddenAt       DateTime?

  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt

  @@index([feedbackId])
  @@index([aiProductArea])
  @@index([sentiment])
  @@index([sentimentScore])
  @@index([urgencyScore])
}
